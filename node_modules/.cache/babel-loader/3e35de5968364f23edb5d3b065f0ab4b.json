{"ast":null,"code":"import _classCallCheck from \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport ClickCard from \"./components/ClickCard\";\nimport Wrapper from \"./components/Wrapper/index.js\";\nimport Header from \"./components/Header/header.js\";\nimport './App.css';\n\nvar fighter = require(\"./clickCards.json\");\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      clickCards: fighter,\n      currentScore: 0,\n      topScore: 0\n    };\n\n    _this.handleCardClick = function (id) {\n      var guessedCorrectly = false; // const cardClicked = this.state.smashList.find(fighter => fighter.id === id)\n\n      var updatedSmashList = _this.state.smashList.map(function (fighter) {\n        // check id when clicked\n        if (fighter.id === id) {\n          // if the fighter wasn't clicked\n          if (!fighter.clicked) {\n            fighter.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return fighter;\n      });\n\n      guessedCorrectly ? _this.handleCorrectGuess(updatedSmashList) : _this.handleIncorrectGuess(updatedSmashList);\n    };\n\n    _this.shuffleFighters = function (smashList) {\n      return smashList.sort(function () {\n        return .5 - Math.random();\n      });\n    };\n\n    _this.handleCorrectGuess = function (smashList) {\n      var _this$state = _this.state,\n          currentScore = _this$state.currentScore,\n          topScore = _this$state.topScore;\n      var newScore = currentScore + 1;\n      var newTopScore = newScore > topScore ? newScore : topScore;\n\n      _this.setState({\n        smashList: _this.shuffleFighters(smashList),\n        currentScore: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    _this.handleIncorrectGuess = function (smashList) {\n      var resetSmashList = smashList.map(function (fighter) {\n        fighter.clicked = false;\n        return fighter;\n      });\n\n      _this.setState({\n        smashList: _this.shuffleFighters(resetSmashList),\n        currentScore: 0\n      });\n    };\n\n    _this.shuffle = function (a) {\n      var j, x, i;\n\n      for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n      }\n\n      return a;\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var fighterArray = this.state.clickCards;\n      var shuffledArray = this.shuffle(fighterArray);\n      this.setState({\n        clickCards: shuffledArray\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.clickCards);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Smash Ultimate Memory Game\")), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Keep clicking on fighters without selecting the same one more than once!\"), this.state.clickCards.map(function (fighter, i) {\n        if (i < 9) {\n          return React.createElement(ClickCard, {\n            key: fighter.id,\n            name: fighter.name,\n            image: fighter.image,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          });\n        }\n      }), \";\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/src/App.js"],"names":["React","Component","ClickCard","Wrapper","Header","fighter","require","App","state","clickCards","currentScore","topScore","handleCardClick","id","guessedCorrectly","updatedSmashList","smashList","map","clicked","handleCorrectGuess","handleIncorrectGuess","shuffleFighters","sort","Math","random","newScore","newTopScore","setState","resetSmashList","shuffle","a","j","x","i","length","floor","fighterArray","shuffledArray","console","log","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ClickCard from \"./components/ClickCard\";\nimport Wrapper from \"./components/Wrapper/index.js\";\nimport Header from \"./components/Header/header.js\";\nimport './App.css';\n\nconst fighter = require(\"./clickCards.json\");\n\nclass App extends Component {\n  \n    state = {\n      clickCards: fighter,\n      currentScore: 0,\n      topScore: 0\n    }\n\n    handleCardClick = (id) => {\n      let guessedCorrectly = false;\n\n      // const cardClicked = this.state.smashList.find(fighter => fighter.id === id)\n      const updatedSmashList = this.state.smashList.map(fighter =>\n        {\n          // check id when clicked\n          if (fighter.id === id) {\n            // if the fighter wasn't clicked\n            if(!fighter.clicked) {\n              fighter.clicked = true;\n              guessedCorrectly = true;\n            }\n          }\n\n          return fighter\n          \n        });\n        \n        (guessedCorrectly) ?\n          this.handleCorrectGuess(updatedSmashList) :\n          this.handleIncorrectGuess(updatedSmashList)\n        }\n\n        shuffleFighters = (smashList) => smashList.sort(() => .5 - \n        Math.random());\n\n      handleCorrectGuess = (smashList) => {\n        const {currentScore, topScore} = this.state;\n\n        const newScore = currentScore + 1;\n\n        const newTopScore = (newScore > topScore) ? newScore :\n        topScore;\n\n        this.setState({\n          smashList: this.shuffleFighters(smashList),\n          currentScore: newScore,\n          topScore: newTopScore,\n        })\n      }\n\n      handleIncorrectGuess = (smashList) => {\n        const resetSmashList = smashList.map(fighter => {\n          fighter.clicked = false;\n          return fighter;\n        })\n\n        this.setState({\n          smashList: this.shuffleFighters(resetSmashList),\n          currentScore: 0\n        })\n      }\n\n      componentDidMount() {\n        var fighterArray = this.state.clickCards\n        var shuffledArray = this.shuffle(fighterArray)\n\n        this.setState({\n          clickCards: shuffledArray\n        })\n      }\n\n       shuffle = (a) => {\n        var j, x, i;\n        for (i = a.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            x = a[i];\n            a[i] = a[j];\n            a[j] = x;\n        }\n        return a;\n    }\n\n    render() {\n    console.log(this.state.clickCards);\n    return (\n      <div>\n        <Header>\n          <h1>Smash Ultimate Memory Game</h1>\n        </Header>\n\n        <Wrapper>\n        <h3 className=\"title\">Keep clicking on fighters without selecting the same one more than once!</h3>\n        {\n          this.state.clickCards.map((fighter, i) => {\n            if (i < 9) {\n            return (\n            <ClickCard\n            key={fighter.id}\n            name={fighter.name}\n            image={fighter.image}\n            />  \n          )\n        }\n      })\n        \n       };\n    </Wrapper>\n      </div>\n      \n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}