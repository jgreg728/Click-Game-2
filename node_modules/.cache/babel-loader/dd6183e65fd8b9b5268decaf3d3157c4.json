{"ast":null,"code":"import _classCallCheck from \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport ClickCard from \"./components/ClickCard\";\nimport Wrapper from \"./components/Wrapper/index.js\";\nimport Header from \"./components/Header/header.js\";\nimport './App.css';\n\nvar fighter = require(\"./clickCards.json\");\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      smashList: fighter,\n      currentScore: 0,\n      topScore: 0\n    };\n\n    _this.handleCardClick = function (id) {\n      console.log(\"handleCardClick\");\n      var guessedCorrectly = false; // const cardClicked = this.state.smashList.find(fighter => fighter.id === id)\n\n      var updatedSmashList = _this.state.smashList.map(function (fighter) {\n        // check id when clicked\n        if (fighter.id === id) {\n          // if the fighter wasn't clicked\n          if (!fighter.clicked) {\n            fighter.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return fighter;\n      });\n\n      guessedCorrectly ? _this.handleCorrectGuess(updatedSmashList) : _this.handleIncorrectGuess(updatedSmashList);\n    };\n\n    _this.shuffleFighters = function (smashList) {\n      return smashList.sort(function () {\n        return .5 - Math.random();\n      });\n    };\n\n    _this.handleCorrectGuess = function (smashList) {\n      var _this$state = _this.state,\n          currentScore = _this$state.currentScore,\n          topScore = _this$state.topScore;\n      var newScore = currentScore + 1;\n      var newTopScore = newScore > topScore ? newScore : topScore;\n\n      _this.setState({\n        smashList: _this.shuffleFighters(smashList),\n        currentScore: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    _this.handleIncorrectGuess = function (smashList) {\n      var resetSmashList = smashList.map(function (fighter) {\n        fighter.clicked = false;\n        return fighter;\n      });\n      alert(\"GAME OVER...\");\n\n      _this.setState({\n        smashList: _this.shuffleFighters(resetSmashList),\n        currentScore: 0\n      });\n    };\n\n    _this.shuffle = function (a) {\n      var j, x, i;\n\n      for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n      }\n\n      return a;\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // SHUFFLE FIGHTERS PER CLICK\n    value: function componentDidMount() {\n      var fighterArray = this.state.smashList;\n      var shuffledArray = this.shuffle(fighterArray);\n      this.setState({\n        smashList: shuffledArray\n      });\n    } // SHUFFLE FIGHTERS FUNCTION\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.state.smashList);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Super Smash Ultimate Memory Game\"), React.createElement(\"img\", {\n        class: \"smashLogo\",\n        src: \"./public/images/smash_logo.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Keep clicking on fighters without selecting the same one more than once!\"), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Score: \", this.state.currentScore, \" \")), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.state.smashList.map(function (fighter, i) {\n        if (i < 9) {\n          return React.createElement(ClickCard, {\n            key: fighter.id,\n            name: fighter.name,\n            image: fighter.image,\n            id: fighter.id,\n            clickedCard: _this2.handleCardClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          });\n        }\n      }), \";\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/johngregorio/Desktop/Rutgers_Coding_Bootcamp/GitHub/Homework/week-19/Click-Game/my-app/src/App.js"],"names":["React","Component","ClickCard","Wrapper","Header","fighter","require","App","state","smashList","currentScore","topScore","handleCardClick","id","console","log","guessedCorrectly","updatedSmashList","map","clicked","handleCorrectGuess","handleIncorrectGuess","shuffleFighters","sort","Math","random","newScore","newTopScore","setState","resetSmashList","alert","shuffle","a","j","x","i","length","floor","fighterArray","shuffledArray","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ClickCard from \"./components/ClickCard\";\nimport Wrapper from \"./components/Wrapper/index.js\";\nimport Header from \"./components/Header/header.js\";\nimport './App.css';\n\nconst fighter = require(\"./clickCards.json\");\n\nclass App extends Component {\n  \n    state = {\n      smashList: fighter,\n      currentScore: 0,\n      topScore: 0\n    }\n\n    handleCardClick = (id) => {\n      console.log(\"handleCardClick\")\n      let guessedCorrectly = false;\n\n      // const cardClicked = this.state.smashList.find(fighter => fighter.id === id)\n      const updatedSmashList = this.state.smashList.map(fighter =>\n        {\n          // check id when clicked\n          if (fighter.id === id) {\n            // if the fighter wasn't clicked\n            if(!fighter.clicked) {\n              fighter.clicked = true;\n              guessedCorrectly = true;\n            }\n          }\n\n          return fighter\n          \n        });\n        \n        (guessedCorrectly) ?\n          this.handleCorrectGuess(updatedSmashList) :\n          this.handleIncorrectGuess(updatedSmashList)\n        }\n\n        shuffleFighters = (smashList) => smashList.sort(() => .5 - \n        Math.random());\n\n    // IF A CLICK IS CORRECT OR WRONG\n      handleCorrectGuess = (smashList) => {\n        const {currentScore, topScore} = this.state;\n\n        const newScore = currentScore + 1;\n\n        const newTopScore = (newScore > topScore) ? newScore :\n        topScore;\n\n        this.setState({\n          smashList: this.shuffleFighters(smashList),\n          currentScore: newScore,\n          topScore: newTopScore,\n        })\n      }\n\n      handleIncorrectGuess = (smashList) => {\n        const resetSmashList = smashList.map(fighter => {\n          fighter.clicked = false;\n          return fighter;\n        })\n\n        alert(\"GAME OVER...\")\n\n        this.setState({\n          smashList: this.shuffleFighters(resetSmashList),\n          currentScore: 0\n        })\n      }  \n      \n   \n\n      // SHUFFLE FIGHTERS PER CLICK\n      componentDidMount() {\n        var fighterArray = this.state.smashList\n        var shuffledArray = this.shuffle(fighterArray)\n\n        this.setState({\n          smashList: shuffledArray\n        })\n      }\n      // SHUFFLE FIGHTERS FUNCTION\n       shuffle = (a) => {\n        var j, x, i;\n        for (i = a.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            x = a[i];\n            a[i] = a[j];\n            a[j] = x;\n        }\n        return a;\n    }\n\n    render() {\n    console.log(this.state.smashList);\n    return (\n      <div>\n        <Header>\n          <h1>Super Smash Ultimate Memory Game</h1>\n          <img class=\"smashLogo\" src=\"./public/images/smash_logo.png\"></img>\n          <h3 className=\"title\">Keep clicking on fighters without selecting the same one more than once!</h3>\n\n          <h1>Score: {this.state.currentScore} </h1>\n        </Header>\n\n        <Wrapper>\n       \n        {\n          this.state.smashList.map((fighter, i) => {\n            if (i < 9) {\n            return (\n            <ClickCard\n            key={fighter.id}\n            name={fighter.name}\n            image={fighter.image}\n            id={fighter.id}\n\n            clickedCard={this.handleCardClick}\n            />  \n          )\n        }\n      })\n        \n       };\n    </Wrapper>\n      </div>\n      \n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}